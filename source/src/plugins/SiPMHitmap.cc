/// \file SiPMHitmap.cc
/*
 *
 * SiPMHitmap.cc source template automatically generated by a class generator
 * Creation date : 13 june 2018
 *
 * This file is part of dqm4hep-dream libraries.
 *
 * dqm4hep-dream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with dqm4hep-dream.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @author Tom Coates
 * @copyright 2018
 */

// -- dqm4hep headers
#include <dqm4hep/Internal.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/RootHeaders.h>
#include <dqm4hep/Module.h>
#include "dqm4hep/PluginManager.h"

namespace dqm4hep {

  // Everything would be so much easier if the namespace was core, not dream
  namespace dream {
    
    class SiPMHitmap : public dqm4hep::online::AnalysisModule {
    public:
      SiPMHitmap() = default;
      SiPMHitmap(const SiPMHitmap&) = delete;
      SiPMHitmap& operator=(const SiPMHitmap&) = delete;
      
    private:
      void readSettings(const core::TiXmlHandle &handle) override;
      void initModule() override;
      void startOfRun(core::Run &run) override;
      void startOfCycle() override;
      void endOfCycle(const online::EOCCondition &condition) override;
      void endOfRun(const core::Run &run) override;
      void endModule() override;
      void process(core::EventPtr event) override;
      
    private:
      core::MonitorElement* m_pHitmap;
    };
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::readSettings(const core::TiXmlHandle &xmlHandle) {

      m_pHitmap = NULL;

      // The DQMXmlHelper class no longer exists, so a new function is needed to book the monitor element
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, DQMXmlHelper::bookMonitorElement(this, xmlHandle, "sipm_hitmap_1", m_pHitmap));

      // It also doesn't like having a possible return in a void function, but this is what I should be doing. Can I just override this function to return a statuscode?

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::initModule() {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::startOfRun(core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::startOfCycle() {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::endOfCycle(const online::EOCCondition &/*condition*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::endOfRun(const core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::endModule() {

    }
    
    //-------------------------------------------------------------------------------------------------

    void SiPMHitmap::process(core::EventPtr event) {

      if(nullptr == event) {
	dqm_warning("Event pointer is invalid - skipping this event");
	return;
      }
      
      // The variable event is just a pointer, but I have to make it a GenericEvent for the things below to work. Cast it?

      std::vector<float> eventChannels;
      event->getValues("Channels", eventChannels);

      int i = 0;
      int j = 0;
      int channelNum = 0;

      for(i=0; i<8; i++) { // the columns
	for(j=0;j<8; j++) {
	  m_pHitmap->get<TH2I>()->Fill(i,j,eventChannels[channelNum]);
	  std::cout << "(i, j): " << i << ", " << j << std::endl;
	  std::cout << "Channel no.:" << channelNum << std::endl;
	  channelNum++;
	}
      }

    }
    
    DQM_PLUGIN_DECL(SiPMHitmap, "DreamSiPMHitmap");
    
  }
  
}
